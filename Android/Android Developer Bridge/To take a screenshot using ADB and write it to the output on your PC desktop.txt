To take a screenshot using ADB and write it to the output on your PC desktop using a Python script, you can follow these steps:

1. Make sure you have ADB installed on your PC and it's added to the system's PATH.

2. Create a Python script with the following code:

```python
import subprocess
import os
import shutil

# Define the ADB command to capture a screenshot
adb_screenshot_command = ['adb', 'shell', 'screencap', '/sdcard/screenshot.png']

# Define the ADB command to pull the screenshot to your PC
adb_pull_command = ['adb', 'pull', '/sdcard/screenshot.png', 'output_folder_path']

try:
    # Capture the screenshot on the device
    subprocess.run(adb_screenshot_command, check=True)
    
    # Create the output folder if it doesn't exist
    output_folder = 'output_folder_path'
    os.makedirs(output_folder, exist_ok=True)

    # Pull the screenshot from the device to your PC
    subprocess.run(adb_pull_command, check=True)
    
    # Move the screenshot to the PC desktop
    screenshot_path = os.path.join(output_folder, 'screenshot.png')
    desktop_path = os.path.expanduser("~/Desktop/screenshot.png")
    shutil.move(screenshot_path, desktop_path)
    
    print("Screenshot saved to desktop.")

except subprocess.CalledProcessError as e:
    print(f"Error: {e}")
```

Replace `'output_folder_path'` with the actual path where you want to save the screenshot temporarily on your PC before moving it to the desktop. This script captures a screenshot on the connected Android device, pulls it to your PC, and then moves it to your desktop.

3. Run the Python script. It will capture a screenshot from the connected Android device, save it to the specified folder on your PC, and finally move it to your desktop.

Remember to have the necessary permissions on your Android device for capturing screenshots, and ensure that your Android device is connected to your PC via USB and debugging mode is enabled. Also, make sure you have the required permissions and dependencies for using ADB and Python's `subprocess` module.