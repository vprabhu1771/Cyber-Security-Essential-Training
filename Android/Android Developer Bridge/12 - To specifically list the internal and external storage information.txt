To specifically list the internal and external storage information on an Android device using ADB and a Python script, you can use the following example:

1. Ensure your Android device is connected via USB and debugging mode is enabled.

2. Create a Python script with the following code:

```python
import subprocess

# Define the ADB commands to get internal and external storage information
adb_internal_storage_command = ['adb', 'shell', 'df', '/data']
adb_external_storage_command = ['adb', 'shell', 'df', '/mnt/sdcard']

try:
    # Get internal storage information from the connected Android device
    result_internal = subprocess.run(adb_internal_storage_command, capture_output=True, text=True, check=True)
    internal_storage_output = result_internal.stdout

    # Get external storage (usually SD card) information from the connected Android device
    result_external = subprocess.run(adb_external_storage_command, capture_output=True, text=True, check=True)
    external_storage_output = result_external.stdout

    print("Internal Storage Information:")
    print(internal_storage_output)

    print("\nExternal Storage Information:")
    print(external_storage_output)
except subprocess.CalledProcessError as e:
    print(f"Error: {e}")
```

3. Run the Python script. It will send the ADB commands to retrieve internal and external storage information from the connected Android device.

The script uses the `df` command through ADB to display the disk space usage for the specified internal and external storage paths (`/data` and `/mnt/sdcard`, respectively). The output is captured and printed for each type of storage.

Please note that the storage paths may vary depending on your device's configuration. Make sure to adapt the paths if they are different on your device.

As always, exercise caution when interacting with your device via ADB and ensure you have proper permissions and knowledge before making any changes.